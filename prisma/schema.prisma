generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

enum UserRole {
  USER
  PENGEPUL
  PENGRAJIN
  ADMIN
}

enum PostStatus {
  ACTIVE
  TAKEN
  COMPLETED
  CANCELLED
}

enum MaterialType {
  PLASTIC
  GLASS
  METAL
  PAPER
  ELECTRONIC
  ORGANIC
  OTHER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?  
  role          UserRole  @default(USER)
  phone         String?
  address       String?
  latitude      Float?
  longitude     Float?    
  bio           String?   @db.Text
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false) 
  isOnline      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  accounts         Account[]
  sessions         Session[]
  posts            Post[]           
  pengepulProfile  PengepulProfile?
  pengrajinProfile PengrajinProfile?
  chatRooms        ChatRoom[]       @relation("ChatParticipants")
  messages         Message[]
  transactions     Transaction[]    @relation("TransactionUser")
  reviews          Review[]
  notifications    Notification[]
  craftRequests    CraftRequest[]
  chatbotConversations ChatbotConversation[]
  @@map("users")
  @@index([email])
  @@index([role])
  @@index([latitude, longitude])
}

model PengepulProfile {
  id                String         @id @default(cuid())
  userId            String         @unique
  companyName       String?
  licenseNumber     String?        @unique
  specializedMaterials MaterialType[]
  operatingArea     String[]      
  description       String?        @db.Text
  website           String?
  workingHours      String?
  totalReviews      Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  takenPosts        Post[]         
  transactions      Transaction[]  @relation("TransactionPengepul")
  reviews           Review[]
  
  averageRating Float? @default(0)

  @@map("pengepul_profiles")
  @@index([userId])
}

model PengrajinProfile {
  id            String         @id @default(cuid())
  userId        String         @unique
  craftType     String[]       
  materials     MaterialType[] 
  portfolio     String[]       
  priceRange    String?        
  description   String?        @db.Text
  totalReviews  Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests      CraftRequest[]
  transactions  Transaction[]  @relation("TransactionPengrajin")
  reviews       Review[]
  
  averageRating Float? @default(0)
  
  @@map("pengrajin_profiles")
  @@index([userId])
}

model Post {
  id            String       @id @default(cuid())
  title         String
  description   String       @db.Text
  materialType  MaterialType
  weight        Float?      
  images        String[] 
  condition     String?    
  address       String
  latitude      Float
  longitude     Float
  status        PostStatus   @default(ACTIVE)
  suggestedPrice Float?  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  takenAt       DateTime?   
  completedAt   DateTime?   
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pengepulId    String?
  pengepul      PengepulProfile? @relation(fields: [pengepulId], references: [id])
  chatRooms     ChatRoom[]
  transactions  Transaction[]

  @@map("posts")
  @@index([userId])
  @@index([status])
  @@index([materialType])
  @@index([latitude, longitude])
}

model CraftRequest {
  id            String            @id @default(cuid())
  title         String
  description   String            @db.Text
  craftType     String
  materialType  MaterialType?
  budget        Float?
  deadline      DateTime?
  referenceImages String[]
  address       String?
  latitude      Float?
  longitude     Float?
  status        RequestStatus     @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  pengrajinId   String?
  pengrajin     PengrajinProfile? @relation(fields: [pengrajinId], references: [id])
  chatRooms     ChatRoom[]
  transactions  Transaction[]
  @@map("craft_requests")
  @@index([userId])
  @@index([status])
  @@index([latitude, longitude])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ChatRoom {
  id        String   @id @default(cuid())
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String?
  post      Post?         @relation(fields: [postId], references: [id])
  requestId String?
  request   CraftRequest? @relation(fields: [requestId], references: [id])
  participants User[]     @relation("ChatParticipants")
  messages     Message[]
  @@map("chat_rooms")
  @@index([postId])
  @@index([requestId])
}

enum ChatType {
  DIRECT    
  POST      
  REQUEST   
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  messageType MessageType @default(TEXT)
  createdAt  DateTime @default(now())
  readAt     DateTime?
  senderId   String
  sender     User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatRoomId String
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  @@map("messages")
  @@index([senderId])
  @@index([chatRoomId])
  @@index([createdAt])
}

enum MessageType {
  TEXT
  IMAGE
  LOCATION
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  amount      Float?          
  description String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completedAt DateTime?
  userId      String
  user        User              @relation("TransactionUser", fields: [userId], references: [id])
  postId      String?
  post        Post?             @relation(fields: [postId], references: [id])
  requestId   String?
  request     CraftRequest?     @relation(fields: [requestId], references: [id])
  pengepulId  String?
  pengepul    PengepulProfile?  @relation("TransactionPengepul", fields: [pengepulId], references: [id])
  pengrajinId String?
  pengrajin   PengrajinProfile? @relation("TransactionPengrajin", fields: [pengrajinId], references: [id])
  @@map("transactions")
  @@index([userId])
  @@index([status])
  @@index([type])
}

enum TransactionType {
  WASTE_COLLECTION  
  CRAFT_SERVICE     
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Review {
  id         String @id @default(cuid())
  rating     Int 
  comment    String? @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  pengepulId  String?
  pengepul    PengepulProfile? @relation(fields: [pengepulId], references: [id])
  pengrajinId String?
  pengrajin   PengrajinProfile? @relation(fields: [pengrajinId], references: [id])
  @@map("reviews")
  @@index([reviewerId])
  @@index([pengepulId])
  @@index([pengrajinId])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("notifications")
  @@index([userId])
  @@index([isRead])
}

enum NotificationType {
  POST_TAKEN      
  REQUEST_ACCEPTED 
  CHAT_MESSAGE   
  TRANSACTION_UPDATE 
  GENERAL         
}

model ChatbotConversation {
  id         String   @id @default(cuid())
  sessionId  String  
  query      String   @db.Text
  response   String   @db.Text
  context    Json?   
  createdAt  DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  @@map("chatbot_conversations")
  @@index([userId])
  @@index([sessionId])
}